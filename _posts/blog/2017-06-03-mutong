---
layout: post
title: leetcode算法题：Container With Most Water 解析
categories: Algorithms leetcode
description: 
keywords: Algorithms
---

## 题目描述

Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.

Note: You may not slant the container and n is at least 2. 

## 思路

题目主要意思就是说，有一个二维坐标系，(i, ai) 表示 从 (i, 0) 到 (i, ai) 的一条线段，两条这样的线段加上之间的x轴组成一个桶，求这个桶最多装多少水。

小时候我们学过“木桶定理”，知道容积是最短一片决定的。

这道题真正难的地方是思路。可以用这样一种思路，先把两条线段放在最外两边，然后，向中间靠拢。如果h（左）小于 h（右），左边那条线右移，反之，右边那条线向左移动。直到两线重合。期间不断更新max（容积）。


## 原理

很多人怀疑思路的可行性。可以这样考虑，初始时，两边在最外，此时x最大，要想让容积更大，就得让短边更长，所以就让短边向里移动。

## java实现

public class n11 {

       public static void main(String[] args) {

		// TODO Auto-generated method stub

		int []a={1,1,11,2};

                System.out.println(maxArea(a));

	}

	public static int maxArea(int[] height) { 

		int L=0;

		int R=height.length-1;

		int ans=0;

		int temp=0;

		if(R+1<2){

			return 0;

		}

		ans=Math.min(height[L], height[R])*(R-L);

		while(L<R){

			temp=Math.min(height[L], height[R])*(R-L);

			if(height[L]<height[R]){


				L++;

			}else{

				R--;

			}

			if(temp>ans){

				ans=temp;

			}

		}

               return ans;

    }

}


